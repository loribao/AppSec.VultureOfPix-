// <auto-generated />
using System;
using AppSec.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppSec.Infra.Migrations
{
    [DbContext(typeof(ContextAppSec))]
    [Migration("20240317224748_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("AppSec.Domain.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("alert")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "alert");

                    b.Property<string>("alertRef")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "alertRef");

                    b.Property<string>("confidence")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "confidence");

                    b.Property<string>("count")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<string>("cweid")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cweid");

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("otherinfo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "otherinfo");

                    b.Property<string>("pluginid")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "pluginid");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reference");

                    b.Property<string>("riskcode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "riskcode");

                    b.Property<string>("riskdesc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "riskdesc");

                    b.Property<string>("solution")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "solution");

                    b.Property<string>("sourceid")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sourceid");

                    b.Property<string>("wascid")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "wascid");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Alert");

                    b.HasAnnotation("Relational:JsonPropertyName", "alerts");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.DastAnalysisEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlDast")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserDast")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DastAnalysis");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.DastReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DastAnalysisEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("generated")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@generated");

                    b.Property<string>("programName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@programName");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@version");

                    b.HasKey("Id");

                    b.HasIndex("DastAnalysisEntityId");

                    b.ToTable("DastReport");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlertId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("attack")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "attack");

                    b.Property<string>("evidence")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "evidence");

                    b.Property<string>("method")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "method");

                    b.Property<string>("otherinfo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "otherinfo");

                    b.Property<string>("param")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "param");

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "uri");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.ToTable("Instance");

                    b.HasAnnotation("Relational:JsonPropertyName", "instances");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DastId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SastId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DastId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("SastId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.RepoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastAnalisysEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Languages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlBase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SastAnalisys");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastMeasuresSearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SastAnalisysEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SastAnalisysEntityId");

                    b.ToTable("SastMeasuresSearchHistory");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastMeasuresSearchHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SastMeasuresSearchHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SastMeasuresSearchHistoryId");

                    b.ToTable("SastMeasuresSearchHistoryItem");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DastReportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("host")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@host");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@name");

                    b.Property<string>("port")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@port");

                    b.Property<string>("ssl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "@ssl");

                    b.HasKey("Id");

                    b.HasIndex("DastReportId");

                    b.ToTable("Site");

                    b.HasAnnotation("Relational:JsonPropertyName", "site");
                });

            modelBuilder.Entity("RepoCommitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Files")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RepoEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RepoEntityId");

                    b.ToTable("RepoCommits");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Alert", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.Site", null)
                        .WithMany("alerts")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.DastReport", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.DastAnalysisEntity", null)
                        .WithMany("DastReports")
                        .HasForeignKey("DastAnalysisEntityId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Instance", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.Alert", null)
                        .WithMany("instances")
                        .HasForeignKey("AlertId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.ProjectEntity", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.DastAnalysisEntity", "Dast")
                        .WithMany()
                        .HasForeignKey("DastId");

                    b.HasOne("AppSec.Domain.Entities.RepoEntity", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppSec.Domain.Entities.SastAnalisysEntity", "Sast")
                        .WithMany()
                        .HasForeignKey("SastId");

                    b.Navigation("Dast");

                    b.Navigation("Repository");

                    b.Navigation("Sast");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastMeasuresSearchHistory", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.SastAnalisysEntity", null)
                        .WithMany("Measures")
                        .HasForeignKey("SastAnalisysEntityId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastMeasuresSearchHistoryItem", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.SastMeasuresSearchHistory", null)
                        .WithMany("History")
                        .HasForeignKey("SastMeasuresSearchHistoryId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Site", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.DastReport", null)
                        .WithMany("site")
                        .HasForeignKey("DastReportId");
                });

            modelBuilder.Entity("RepoCommitEntity", b =>
                {
                    b.HasOne("AppSec.Domain.Entities.RepoEntity", null)
                        .WithMany("Commits")
                        .HasForeignKey("RepoEntityId");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Alert", b =>
                {
                    b.Navigation("instances");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.DastAnalysisEntity", b =>
                {
                    b.Navigation("DastReports");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.DastReport", b =>
                {
                    b.Navigation("site");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.RepoEntity", b =>
                {
                    b.Navigation("Commits");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastAnalisysEntity", b =>
                {
                    b.Navigation("Measures");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.SastMeasuresSearchHistory", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("AppSec.Domain.Entities.Site", b =>
                {
                    b.Navigation("alerts");
                });
#pragma warning restore 612, 618
        }
    }
}
